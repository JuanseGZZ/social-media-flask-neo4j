-- Tabla Usuario
CREATE TABLE Usuario (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    apellido VARCHAR2(100),
    email VARCHAR2(100) UNIQUE,
    usuario VARCHAR2(50) UNIQUE,
    contraseña VARCHAR2(100),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    edad NUMBER
);

-- Tabla Publicaciones
CREATE TABLE Publicaciones (
    id_publicacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contenido VARCHAR2(1000),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_usuario NUMBER,
    FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Tabla Comentarios
CREATE TABLE Comentarios (
    id_comentario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contenido VARCHAR2(1000),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_usuario NUMBER,
    id_publicacion NUMBER,
    FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (id_publicacion) REFERENCES Publicaciones(id_publicacion)
);

-- Tabla Likeo_Post
CREATE TABLE Likeo_Post (
    id_like NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_usuario NUMBER,
    id_publicacion NUMBER,
    FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    FOREIGN KEY (id_publicacion) REFERENCES Publicaciones(id_publicacion)
);


-- Insertar usuarios
INSERT INTO Usuario (nombre, apellido, email, usuario, contraseña, edad)
VALUES ('Juan', 'Pérez', 'juan.perez@example.com', 'juanperez', '1234segura', 30);

INSERT INTO Usuario (nombre, apellido, email, usuario, contraseña, edad)
VALUES ('María', 'Gómez', 'maria.gomez@example.com', 'mariagomez', 'segura5678', 28);

INSERT INTO Usuario (nombre, apellido, email, usuario, contraseña, edad)
VALUES ('Luis', 'Martínez', 'luis.martinez@example.com', 'luismartinez', 'clave4321', 35);





-- Insertar publicaciones y comentarios intercalados
DECLARE
    usuario_id NUMBER;
    publicacion_id NUMBER;
BEGIN
    FOR i IN 1..10 LOOP
        FOR usuario_id IN 1..3 LOOP
            -- Insertar una publicación
            INSERT INTO Publicaciones (contenido, id_usuario)
            VALUES ('Publicación del usuario ' || usuario_id || ', número ' || i, usuario_id)
            RETURNING id_publicacion INTO publicacion_id;

            -- Insertar un comentario relacionado con la publicación
            INSERT INTO Comentarios (contenido, id_usuario, id_publicacion)
            VALUES ('Comentario del usuario ' || usuario_id || ' en la publicación ' || publicacion_id, usuario_id, publicacion_id);
        END LOOP;
    END LOOP;
END;




-- Obtener el ID de la última publicación
DECLARE
    ultima_publicacion_id NUMBER;
BEGIN
    SELECT MAX(id_publicacion) INTO ultima_publicacion_id FROM Publicaciones;

    -- Los 3 usuarios le dan like
    FOR usuario_id IN 1..3 LOOP
        INSERT INTO Likeo_Post (id_usuario, id_publicacion)
        VALUES (usuario_id, ultima_publicacion_id);
    END LOOP;
END;





-- Obtener el ID de la última publicación
DECLARE
    ultima_publicacion_id NUMBER;
BEGIN
    SELECT MAX(id_publicacion) INTO ultima_publicacion_id FROM Publicaciones;

    -- Los 3 usuarios le dan like
    FOR usuario_id IN 1..3 LOOP
        INSERT INTO Likeo_Post (id_usuario, id_publicacion)
        VALUES (usuario_id, ultima_publicacion_id);
    END LOOP;
END;






-- Consultar publicaciones con exactamente 3 likes
SELECT p.id_publicacion, COUNT(l.id_like) AS total_likes
FROM Publicaciones p
JOIN Likeo_Post l ON p.id_publicacion = l.id_publicacion
GROUP BY p.id_publicacion
HAVING COUNT(l.id_like) = 3;
